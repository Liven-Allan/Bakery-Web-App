{"ast":null,"code":"var _jsxFileName = \"/home/liven/Desktop/Vianny_Bakery/Vianny_Project/bakery-app/src/production_layout/production_list/ProductionList.js\",\n  _s = $RefreshSig$();\n/* src/production_layout/production_list/ProductionList.js */\n\nimport React, { useState, useEffect } from 'react';\nimport AddProductionModal from '../../productionModal/AddProductionModal'; // Import the AddProductionModal component\nimport RawMaterialModal from '../../productionModal/RawMaterialModal'; // Import the new RawMaterialModal component\nimport './ProductionList.css'; // Ensure this path is correct\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductionList = () => {\n  _s();\n  const [modalIsOpen, setModalIsOpen] = useState(false); // State to manage the modal open/close\n  const [productions, setProductions] = useState([]); // State to manage production entries\n  const [selectedProduct, setSelectedProduct] = useState(null); // State to track the currently selected product for adding raw materials\n  const [rawMaterials, setRawMaterials] = useState([]); // State to manage raw materials\n\n  useEffect(() => {\n    // Fetch raw materials from the backend\n    const fetchRawMaterials = async () => {\n      try {\n        const response = await fetch('/api/inventory'); // Update with your actual API endpoint\n        const data = await response.json();\n        setRawMaterials(data);\n      } catch (error) {\n        console.error('Error fetching raw materials:', error);\n      }\n    };\n    fetchRawMaterials();\n  }, []);\n  const handleOpenModal = () => {\n    setModalIsOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalIsOpen(false);\n    setSelectedProduct(null); // Reset the selected product when closing modal\n  };\n  const handleAddProduction = productName => {\n    // Update productions state with the new product name\n    setProductions([...productions, {\n      name: productName,\n      rawMaterials: []\n    }]);\n    handleCloseModal(); // Close the modal after adding the production\n  };\n  const handleOpenRawMaterialModal = product => {\n    setSelectedProduct(product);\n  };\n  const handleAddRawMaterial = (productName, rawMaterialName, quantity) => {\n    setProductions(productions.map(production => production.name === productName ? {\n      ...production,\n      rawMaterials: [...production.rawMaterials, {\n        name: rawMaterialName,\n        quantity\n      }]\n    } : production));\n    setSelectedProduct(null); // Close the raw material modal\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Production List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleOpenModal,\n      children: \"Add New Production\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AddProductionModal, {\n      isOpen: modalIsOpen,\n      onRequestClose: handleCloseModal,\n      onAddProduction: handleAddProduction // Pass the function to handle adding production\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), selectedProduct && /*#__PURE__*/_jsxDEV(RawMaterialModal, {\n      isOpen: !!selectedProduct,\n      onRequestClose: () => setSelectedProduct(null),\n      rawMaterials: rawMaterials,\n      productName: selectedProduct.name,\n      onAddRawMaterial: handleAddRawMaterial\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"production-list\",\n      children: productions.map((product, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"production-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Product:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: product.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          onClick: () => handleOpenRawMaterialModal(product),\n          children: \"Select Raw Materials\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          children: \"Record Production\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"raw-materials-table\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Raw Material\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Quantity\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: product.rawMaterials.map((rm, idx) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: rm.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: rm.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 23\n                }, this)]\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductionList, \"+sNkumexqiScs32l3Tehk3d++Bs=\");\n_c = ProductionList;\nexport default ProductionList;\nvar _c;\n$RefreshReg$(_c, \"ProductionList\");","map":{"version":3,"names":["React","useState","useEffect","AddProductionModal","RawMaterialModal","jsxDEV","_jsxDEV","ProductionList","_s","modalIsOpen","setModalIsOpen","productions","setProductions","selectedProduct","setSelectedProduct","rawMaterials","setRawMaterials","fetchRawMaterials","response","fetch","data","json","error","console","handleOpenModal","handleCloseModal","handleAddProduction","productName","name","handleOpenRawMaterialModal","product","handleAddRawMaterial","rawMaterialName","quantity","map","production","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isOpen","onRequestClose","onAddProduction","onAddRawMaterial","className","index","type","rm","idx","_c","$RefreshReg$"],"sources":["/home/liven/Desktop/Vianny_Bakery/Vianny_Project/bakery-app/src/production_layout/production_list/ProductionList.js"],"sourcesContent":["/* src/production_layout/production_list/ProductionList.js */\n\nimport React, { useState, useEffect } from 'react';\nimport AddProductionModal from '../../productionModal/AddProductionModal'; // Import the AddProductionModal component\nimport RawMaterialModal from '../../productionModal/RawMaterialModal'; // Import the new RawMaterialModal component\nimport './ProductionList.css'; // Ensure this path is correct\n\nconst ProductionList = () => {\n  const [modalIsOpen, setModalIsOpen] = useState(false); // State to manage the modal open/close\n  const [productions, setProductions] = useState([]); // State to manage production entries\n  const [selectedProduct, setSelectedProduct] = useState(null); // State to track the currently selected product for adding raw materials\n  const [rawMaterials, setRawMaterials] = useState([]); // State to manage raw materials\n\n  useEffect(() => {\n    // Fetch raw materials from the backend\n    const fetchRawMaterials = async () => {\n      try {\n        const response = await fetch('/api/inventory'); // Update with your actual API endpoint\n        const data = await response.json();\n        setRawMaterials(data);\n      } catch (error) {\n        console.error('Error fetching raw materials:', error);\n      }\n    };\n    \n    fetchRawMaterials();\n  }, []);\n\n  const handleOpenModal = () => {\n    setModalIsOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setModalIsOpen(false);\n    setSelectedProduct(null); // Reset the selected product when closing modal\n  };\n\n  const handleAddProduction = (productName) => {\n    // Update productions state with the new product name\n    setProductions([...productions, { name: productName, rawMaterials: [] }]);\n    handleCloseModal(); // Close the modal after adding the production\n  };\n\n  const handleOpenRawMaterialModal = (product) => {\n    setSelectedProduct(product);\n  };\n\n  const handleAddRawMaterial = (productName, rawMaterialName, quantity) => {\n    setProductions(productions.map(production =>\n      production.name === productName\n        ? { ...production, rawMaterials: [...production.rawMaterials, { name: rawMaterialName, quantity }] }\n        : production\n    ));\n    setSelectedProduct(null); // Close the raw material modal\n  };\n\n  return (\n    <div>\n      <h2>Production List</h2>\n      <button onClick={handleOpenModal}>Add New Production</button>\n      <AddProductionModal\n        isOpen={modalIsOpen}\n        onRequestClose={handleCloseModal}\n        onAddProduction={handleAddProduction} // Pass the function to handle adding production\n      />\n      {selectedProduct && (\n        <RawMaterialModal\n          isOpen={!!selectedProduct}\n          onRequestClose={() => setSelectedProduct(null)}\n          rawMaterials={rawMaterials}\n          productName={selectedProduct.name}\n          onAddRawMaterial={handleAddRawMaterial}\n        />\n      )}\n      <div className=\"production-list\">\n        {productions.map((product, index) => (\n          <div key={index} className=\"production-item\">\n            <h3>Product:</h3>\n            <p>{product.name}</p>\n            <button type=\"button\" onClick={() => handleOpenRawMaterialModal(product)}>Select Raw Materials</button>\n            <button type=\"button\">Record Production</button>\n            <div className=\"raw-materials-table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>Raw Material</th>\n                    <th>Quantity</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {product.rawMaterials.map((rm, idx) => (\n                    <tr key={idx}>\n                      <td>{rm.name}</td>\n                      <td>{rm.quantity}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}