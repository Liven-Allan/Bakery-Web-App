{"ast":null,"code":"var _jsxFileName = \"/home/liven/Desktop/Vianny_Bakery/Vianny_Project/bakery-app/src/layout/dashboard/Dashboard.js\",\n  _s = $RefreshSig$();\n/* src/layout/dashboard/Dashboard.js */\n\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport './Dashboard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [stockLevels, setStockLevels] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/historical-data/');\n        const fetchedData = response.data;\n\n        // Aggregate data by date\n        const aggregatedData = {};\n        fetchedData.forEach(item => {\n          const {\n            date,\n            quantity\n          } = item;\n          if (!aggregatedData[date]) {\n            aggregatedData[date] = {\n              date,\n              total_quantity: 0\n            };\n          }\n          aggregatedData[date].total_quantity += quantity;\n        });\n\n        // Convert aggregated data to array format\n        const formattedData = Object.values(aggregatedData);\n        setData(formattedData);\n\n        // Set stock levels\n        setStockLevels(fetchedData); // Adjust this based on your data structure\n      } catch (error) {\n        console.error('Error fetching historical data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Custom tooltip content\n  const CustomTooltip = ({\n    active,\n    payload\n  }) => {\n    if (active && payload && payload.length) {\n      const {\n        date,\n        total_quantity\n      } = payload[0].payload;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Date: ${date}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: `Total Quantity: ${total_quantity}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Inventory Trends Over Time\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-container\",\n      children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n        width: \"100%\",\n        height: 400,\n        children: /*#__PURE__*/_jsxDEV(LineChart, {\n          data: data,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"date\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n            content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"total_quantity\",\n            stroke: \"#8884d8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"40GZKI5ngvwP9Cfi3CDwlTASHW0=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","axios","jsxDEV","_jsxDEV","Dashboard","_s","data","setData","stockLevels","setStockLevels","fetchData","response","get","fetchedData","aggregatedData","forEach","item","date","quantity","total_quantity","formattedData","Object","values","error","console","CustomTooltip","active","payload","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","content","type","stroke","_c","$RefreshReg$"],"sources":["/home/liven/Desktop/Vianny_Bakery/Vianny_Project/bakery-app/src/layout/dashboard/Dashboard.js"],"sourcesContent":["/* src/layout/dashboard/Dashboard.js */\n\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport axios from 'axios';\nimport './Dashboard.css';\n\nconst Dashboard = () => {\n  const [data, setData] = useState([]);\n  const [stockLevels, setStockLevels] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8000/api/historical-data/');\n        const fetchedData = response.data;\n\n        // Aggregate data by date\n        const aggregatedData = {};\n        fetchedData.forEach(item => {\n          const { date, quantity } = item;\n          if (!aggregatedData[date]) {\n            aggregatedData[date] = {\n              date,\n              total_quantity: 0\n            };\n          }\n          aggregatedData[date].total_quantity += quantity;\n        });\n\n        // Convert aggregated data to array format\n        const formattedData = Object.values(aggregatedData);\n\n        setData(formattedData);\n\n        // Set stock levels\n        setStockLevels(fetchedData); // Adjust this based on your data structure\n      } catch (error) {\n        console.error('Error fetching historical data:', error);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Custom tooltip content\n  const CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      const { date, total_quantity } = payload[0].payload;\n      return (\n        <div className=\"custom-tooltip\">\n          <p>{`Date: ${date}`}</p>\n          <p>{`Total Quantity: ${total_quantity}`}</p>\n        </div>\n      );\n    }\n\n    return null;\n  };\n\n  return (\n    <div className=\"dashboard\">\n      <h2>Inventory Trends Over Time</h2>\n      <div className=\"chart-container\">\n        <ResponsiveContainer width=\"100%\" height={400}>\n          <LineChart data={data}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            <Line type=\"monotone\" dataKey=\"total_quantity\" stroke=\"#8884d8\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n\n    \n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}